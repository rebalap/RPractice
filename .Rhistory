rm(list = ls())
source("RWeek3.R")
testvector<- makeVector()
vect<- c(1:10)
testvector$set(vect)
testvector$get()
testvector$getmean()
debugSource('~/RPractice/RWeek3.R')
cachMean(testvector)
x$getmean()
x
x$get()
m
m
debugSource('~/RPractice/RWeek3.R')
cachMean(testvector)
m
testvector$getmean()
rm(list = ls())
source("RWeek3.R")
vect<- c(1:10)
testvector<- makeVector()
testvector$set(x)
testvector$set(vect)
testvector$get()
cachMean(testvector)
matrix1<-(c(1,2,3),5:7,8:10)
matrix1<-matrix(c(1,2,3),5:7,8:10,nrow = 3,ncol = 3)
matrix1<-matrix(c(1:3,5:7,8:10),nrow = 3,ncol = 3)
matrix1
matrix1[1,]
matrix2<-rbind(matrix1[1,],matrix1[2,],matrix1[3,])
matrix2
matrix2<-cbind(matrix1[1,],matrix1[2,],matrix1[3,])
matrix2
dim(matrix1)
dim(matrix1)[1]
dim(matrix1)[2]
dim(matrix1)[3]
matrix(...,nrow = 1,ncol = 1)
inversemat <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
matrix_1<-x
i<-dim(matrix_1)[1]
j<-dim(matrix_1)[2]
inverse<-matrix(nrow = j,ncol = i)
for(row in 1:i)
{
cbind(inverse,matrix_1[row,])
}
inverse
}
inversemat <- function(x) {
## Return a matrix that is the inverse of 'x'
matrix_1<-x
i<-dim(matrix_1)[1]
j<-dim(matrix_1)[2]
inverse<-matrix(nrow = j,ncol = i)
for(row in 1:i)
{
cbind(inverse,matrix_1[row,])
}
inverse
}
inversemat(matrix1)
source('~/.active-rstudio-document')
source('~/RPractice/temp.R')
inversemat(matrix1)
inverse
i
j
inverse
matrix1[row,]
cbind(inverse,matrix_1[row,])
debugSource('~/RPractice/temp.R')
inversemat(matrix_1)
inverse
matrix1
inverse
testmat<-matrix(nrow = 3,ncol = 4)
testmat<-cbind(testmat,c(1,2,3))
testmat
testmat<-cbind(testmat[0],c(1,2,3))
testmat
?solve
matrix1
matrix2
matrx3<-matrix()
matrx3[,1]<-matrix2[1,]
matrix()
matrix()<-matrix(nrow = 3,ncol = 3)
matrx3<-matrix(nrow = 3,ncol = 3)
matrx3[,1]<-matrix2[1,]
matrx3[,2]<-matrix2[2,]
matrx3[,3]<-matrix2[3,]
matrx3
identical(matrix1,matrx3)
debugSource('~/RPractice/temp.R')
inversemat(matrix1)
identical(matrix1,matrix2)
matrix1
matrix2
inversemat(matrix2)
matrix1<-inversemat(matrix1)
identical(matrix1,matrix2)
solve(matrix1)
solve(matrix1,1)
inv<-solve(matrix1)
solve(matrix2)
det(matrix1)
matrix1%*%matrix1
newmat<-matrix1%*%matrix1
det(newmat)
solve(newmat)
solve(newmat,tol =1e-17)
solve(newmat,tol =7.76541e-18)
x$setmatrixinverse(invmatrix)
debugSource('~/RPractice/RWeek3.R')
matrix1<-(rnorm(10),nrow=5,ncol=2)
matrix1 <- (rnorm(10),nrow=5,ncol=2)
rnorm(10)
matrix1 <- (rnorm(10),nrow<-5,ncol<-2)
matrix1 <- (as.matrix(rnorm(10)),nrow<-5,ncol<-2)
matrix1 <- (as.matrix(rnorm(10)),nrow=5,ncol=22)
matrix1 <- (1:10,nrow=5,ncol=22)
matrix1 <- (1:10,nrow=5,ncol=2)
rm(list=ls())
matrix1<-matrix(rnorm(10),nrow = 5,ncol = 2)
source("RWeek3.R")
makeCacheMatrix(matrix1)
matrcache<-makeCacheMatrix(matrix1)
matrcache$getmatrix()
cacheSolve(matrcache)
matrix1<-matrix(rnorm(9),nrow = 3,ncol = 3)
matrcache<-makeCacheMatrix(matrix1)
matrcache$getmatrix()
cacheSolve(matrcache)
cacheSolve(matrcache)
library(datasets)
data(iris)
?iris
iris
head(iris)
?mapply
tapply(iris,iris$Species,mean())
tapply(iris,iris$Species,mean(iris$Sepal.Length))
?tapply
tapply(iris,iris$Species,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
apply(iris, 1, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 1, mean)
head(iris)
mean(iris$Sepal.Length)
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
load(mtcars)
data(mtcars)
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars, 2, mean)
lapply(mtcars, mean)
sapply(mtcars, cyl, mean)
head(mtcars)
tapply(mtcars$hp,mtcars$cyl,mean)
x<-tapply(mtcars$hp,mtcars$cyl,mean)
x["4"]-x["8"]
debug(ls)
ls
debug(ls)
ls()
x<--4L
class(x)
x<--4L
class
ok()
exit
rm()
Q
x<--4L
undebug(ls)
ls()
x<--4L
class(x)
x<-c(4,"a",TRUE)
class(x)
rbind(c(1,3,5),c(3,2,10))
x <- list(2, "a", "b", TRUE)
x[[2]]
class(x[[2]])
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x > 10] == 4
x[x > 10] <- 4
x
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x >= 11] <- 4
x
x<- read.csv("hw1_data.csv")
colnames(x)
head(x)[1]
head(x)
x[1:2,]
dim(x)
x[152:153,]
x[45,]("Ozone")
x[45,]["Ozone"]
x[45,]
x[47,]["Ozone"]
sum(is.na(x["Ozone"]))
mean(x["Ozone"],rm=NA)
mean(x["Ozone"],na.rm=TRUE)
mean(!is.na(x["Ozone"]))
tapply(x$Temp,x$Month,mean)
tapply(x$Ozone,x$Month,max)
tapply(x$Ozone,x$Month,summary)
x1<-x[x$Ozone>31 & x$Temp>90]
x1<-x(x$Ozone>31 & x$Temp>90)
x1<-x[x$Ozone>31 && x$Temp>90]
x1
x1[3]
x1<-subset(x,x$Ozone>31,x$Temp>90)
x1<-subset(x,x$Ozone>31 & x$Temp>90)
mean(x1$Solar.R)
x1<-subset(x,!is.na(x$Ozone))
mean(x1$Ozone)
source("Rweek2.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
rm(list = ls())
## This function returns a list containing getters and setters
## for the matrix and its inverse
makeCacheMatrix <- function(x = matrix()) {
inv <<- NULL  #initialize inverse as null
set_mat <- function(mat){  # set matrix
x <<- mat
inv <<- NULL
}
get_mat <- function() x  # get matrix
set_inv <- function(inverse) inv <<- inverse   # set inverse
get_inv <- function () inv  # get inverse
list(set_mat = set_mat, get_mat = get_mat, set_inv = set_inv, get_inv = get_inv) ## list containing getters and setters
}
## This function returns the inverse of a matrix. If the inverse was previously
## computed it is retrieved from the cache, otherwise it uses the previous
## function to set the inverse
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## Note: takes list as an input; this will be the list returned by makeCacheMatrix()
inv <- x$get_inv()  # get current value of inverse
if (!is.null(inv)){   # return current value if inverse is not null
message("getting cached inverse")
return(inv)
}
# if inverse is null :
mat <- x$get_mat()   # retrieve cached matrix
inv <- solve(mat) # solve its inverse
x$set_inv(inv) # set inverse
inv
}
x<- makeCacheMatrix()
v<-matrix(rnorm(9),nrow = 3,ncol = 3)
x$set_mat(v)
x$get_inv()
solve(v)
cacheSolve(x)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
rpois(5,2)
rm(list = ls())
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
?system.time
y<-10
x<-4
x1<-12
x2<-15
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
swirl()
load("swirl")
library(swirl)
rm(list=ls())
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,6)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
swirl()
ok()
swirl()
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips<- sample(c(0,1),100,replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size = 100,0.7)
flips2<- rbinom(100,1,0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean = 100, sd=25)
rpois(5,10)
replicate(100,rpois(5,10))
my_pois<-replicate(100,rpois(5,10))
my_pois
cm<- colMeans(my_pois)
hist(cm)
swirl()
data(cars)
help(cars)
head(cars)
plot(cars)
?plot
plot(x=cars$speed,y=cars$dist)
plot(y=cars$speed,x=cars$dist)
?plot
plot(y=cars$speed,x=cars$dist)
plot(x=cars$speed,y=cars$dist,xlab = "Speed")
plot(x=cars$speed,y=cars$dist,xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed,y=cars$dist,ylab = "Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab = "Speed", ylab = "Stopping Distance")
plot(cars,main="My Plot")
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim=c(10,15))
plot(cars,pch=2)
load(mtcars)
load(mtcars)
data("mtcars")
data(mtcars)
?boxplot
boxplot(mpg~cyl,data = mtcars)
hist(mtcars$mpg)
rm(list=ls())
getwd()
x<-read.csv("hospital-data.csv")
x<-read.csv("outcome-of-care-measures.csv")
head(x)
str(x)
head(x$Hospital.Name,x$State)
head(x$Hospital.Name)
head(x$State)
x$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
x$heartattack
x$heartattack
x$"heartattack"
x$*heartattack
x$State!="AB"
"AB" %in% x$State
"TX" %in% x$State
"heart" %in% x
"heart" %in% colnames(x)
colnames(x)
"heart%" %in% colnames(x)
"%heart%" %in% colnames(x)
x[,7]
colnames(x[,7])
colnames(x)
y<=x[[x$State=="TX"]]
y<-x[[x$State=="TX"]]
x[[x$State=="TX"]]
x[[x$State="TX"]]
x[[x$State=="TX"]]
x$State=="TX"
subset(x,x$State=="TX")
head(subset(x,x$State=="TX"))
x1<- head(subset(x,x$State=="TX"))
x1$State
x1$Hospital.Name
x1<- x1[order(x1$Hospital.Name)]
x1$Hospital.Name
x1<- x1[order(x1$Hospital.Name),]
x1
x1[,3]
subset(x1,x1$City=="TEMPLE")
t<-subset(x1,x1$City=="TEMPLE")
length(t)
dim(t)
t[1]
t$Hospital.Name[1]
t$Hospital.Name
rm(list = ls())
source("RWeek4.R")
best("TX", "heart attack")
source("RWeek4.R")
best("TX", "heart attack")
source("RWeek4.R")
best("TX", "heart attack")
debugSource('~/RPractice/RWeek4.R')
best("TX", "heart attack")
state
outcome
x<-read.csv("outcome-of-care-measures.csv")
source("RWeek4.R")
best("TX", "heart attack")
debugSource('~/RPractice/RWeek4.R')
best("TX", "heart attack")
z[7]
x[7]
best("TX", "heart attack")
source("RWeek4.R")
best("TX", "heart attack")
best("TX", "heart attack")
debugSource('~/RPractice/RWeek4.R')
best("TX", "heart attack")
state_records[column]
as.numeric(state_records[column])
state_records[,column]
source("RWeek4.R")
best("TX", "heart attack")
debugSource('~/RPractice/RWeek4.R')
best("TX", "heart attack")
hospitalname
source("RWeek4.R")
best("TX", "heart attack")
source("RWeek4.R")
debugSource('~/RPractice/RWeek4.R')
best("TX", "heart attack")
hospitalname$Hospital.Name
min_mortality
subset(state_records,state_records[column]==min_mortality)
subset(state_records,state_records[column]==min_mortality)$Hospital.Name
state_records[,2]
hospitalname[,2]
debugSource('~/RPractice/RWeek4.R')
debugSource('~/RPractice/RWeek4.R')
source("RWeek4.R")
debugSource('~/RPractice/RWeek4.R')
best("TX", "heart attack")
debugSource('~/RPractice/RWeek4.R')
